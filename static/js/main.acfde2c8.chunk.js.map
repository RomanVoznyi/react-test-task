{"version":3,"sources":["Components/Task1/FrontEnd/FrontEnd.module.css","Components/Task1/FrontEnd/AddForm/AddForm.module.css","Components/Header/Header.module.css","Components/Task1/FrontEnd/ConvertForm/ConvertForm.module.css","Components/Task1/Task1.module.css","Components/Task2/Task2.module.css","Components/Task3/Task3.module.css","Components/Task4/Task4.module.css","App.module.css","Components/Header/Header.js","Components/Task1/BackEnd/backend.js","Components/Task1/FrontEnd/ConvertForm/ConvertForm.js","Components/Task1/FrontEnd/AddForm/AddForm.js","Components/Task1/FrontEnd/FrontEnd.js","Components/Task1/Task1.js","Components/Task2/Task2.js","Components/Task3/Task3.js","Components/Task4/Task4.js","App.js","index.js"],"names":["module","exports","Header","onClick","className","s","evt","target","id","item","type","refs","actualDB","getUnitsList","localDB","localStorage","getItem","JSON","parse","db","setItem","stringify","getActualDB","keys","Object","map","el","unit","name","ConvertForm","unitsList","useState","value","setValue","unitIn","setUnitIn","unitOut","setUnitOut","handleChanges","checkData","Number","isNaN","onSubmit","preventDefault","request","distance","convert_to","toast","error","autoClose","table","inputField","onChange","button","AddForm","setUnit","setName","ratio","setRatio","oldUnit","setOldUnit","checkList","includes","form","ratios","note","FrontEnd","server","setUnitsList","getResult","updateList","setRequest","result","newList","response","setResponse","showForm","setShowForm","message","setMessage","sendRequestGetResponse","parseRequest","toFixed","prevState","newUnit","forEach","success","toggleAddForm","container","blueTitle","length","addContainer","addButton","addIcon","Task1","TaskField","bigTitle","smallTitle","Task2","Task3","Task4","App","showTask","setShowTask","targetIndex","index","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.acfde2c8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"FrontEnd_container__1fCb_\",\"blueTitle\":\"FrontEnd_blueTitle__Q7MbD\",\"addContainer\":\"FrontEnd_addContainer__VPOKE\",\"addButton\":\"FrontEnd_addButton__1hp9u\",\"addIcon\":\"FrontEnd_addIcon__3AM67\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"AddForm_form__1rGt2\",\"note\":\"AddForm_note__y6fMk\",\"button\":\"AddForm_button__1nhQh\",\"inputField\":\"AddForm_inputField__NhHei\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__1W-WF\",\"item\":\"Header_item__RPcGY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ConvertForm_button__1LSCt\",\"inputField\":\"ConvertForm_inputField__3Od_X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskField\":\"Task1_TaskField__H1k3M\",\"container\":\"Task1_container__3PtCh\",\"bigTitle\":\"Task1_bigTitle__Xe3hk\",\"smallTitle\":\"Task1_smallTitle__rEPSJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskField\":\"Task2_TaskField__2ksZV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskField\":\"Task3_TaskField__22jGP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskField\":\"Task4_TaskField__1VUtV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3uChw\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Header.module.css';\n\nconst Header = ({ onClick }) => {\n  const handleClick = evt => {\n    onClick(evt.target.id - 1);\n  };\n\n  return (\n    <ul className={s.Header} onClick={handleClick}>\n      <li className={s.item}>\n        <button type=\"button\" id=\"1\">\n          Task1\n        </button>\n      </li>\n      <li className={s.item}>\n        <button type=\"button\" id=\"2\">\n          Task2\n        </button>\n      </li>\n      <li className={s.item}>\n        <button type=\"button\" id=\"3\">\n          Task3\n        </button>\n      </li>\n      <li className={s.item}>\n        <button type=\"button\" id=\"4\">\n          Task4\n        </button>\n      </li>\n    </ul>\n  );\n};\n\nHeader.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Header;\n","import db from './dbUnits.json';\n\nconst refs = {\n  actualDB: null,\n};\n\nconst getActualDB = () => {\n  const localDB = localStorage.getItem('db');\n  if (localDB) {\n    refs.actualDB = JSON.parse(localDB);\n  } else {\n    refs.actualDB = db;\n    localStorage.setItem('db', JSON.stringify(db));\n  }\n};\n\nconst getUnitsList = () => {\n  getActualDB();\n  const keys = Object.keys(refs.actualDB);\n\n  return JSON.stringify(\n    keys.map(el => ({ unit: el, name: refs.actualDB[el].name })),\n  );\n};\n\nconst getResult = request => {\n  // request - \"{\"newUnit\": {\"name\":\"unitNamename\",\"ratios\": {\"oldUnit\": ratio}}}\n  const parseRequest = JSON.parse(request);\n  const unitIn = parseRequest.distance.unit;\n  const value = parseRequest.distance.value;\n  const unitOut = parseRequest.convert_to;\n\n  const result = (value * refs.actualDB[unitIn].ratios[unitOut]).toFixed(2);\n\n  const response = {\n    unit: unitOut,\n    value: result,\n  };\n\n  return JSON.stringify(response);\n};\n\nconst updateList = request => {\n  // request - \"{\"newUnit\": {\"name\":\"unitNamename\",\"ratios\": {\"oldUnit\": ratio}}}\n  const parseRequest = JSON.parse(request);\n  const newUnit = Object.keys(parseRequest)[0];\n  const oldUnit = Object.keys(parseRequest[newUnit].ratios)[0];\n  const ratio = parseRequest[newUnit].ratios[oldUnit];\n\n  refs.actualDB[newUnit] = {\n    name: parseRequest[newUnit].name,\n    ratios: {},\n  };\n\n  const keys = Object.keys(refs.actualDB);\n\n  keys.forEach(el => {\n    if (el === oldUnit) {\n      refs.actualDB[el].ratios[newUnit] = (1 / ratio).toFixed(6);\n    } else if (el === newUnit) {\n      keys.forEach(unit => {\n        refs.actualDB[el].ratios[unit] = (\n          refs.actualDB[oldUnit].ratios[unit] * ratio\n        ).toFixed(6);\n      });\n    } else {\n      refs.actualDB[el].ratios[newUnit] = (\n        refs.actualDB[el].ratios[oldUnit] / ratio\n      ).toFixed(6);\n    }\n  });\n\n  localStorage.setItem('db', JSON.stringify(refs.actualDB));\n\n  return JSON.stringify(\n    keys.map(el => ({ unit: el, name: refs.actualDB[el].name })),\n  );\n};\n\nexport { getUnitsList, getResult, updateList };\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport s from './ConvertForm.module.css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst ConvertForm = ({ unitsList, onClick }) => {\n  const [value, setValue] = useState(0);\n  const [unitIn, setUnitIn] = useState('');\n  const [unitOut, setUnitOut] = useState('');\n\n  const handleChanges = evt => {\n    const { name, value } = evt.target;\n\n    switch (name) {\n      case 'unitIn':\n        setUnitIn(value);\n        break;\n      case 'unitOut':\n        setUnitOut(value);\n        break;\n      case 'value':\n        setValue(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const createRequest = evt => {\n    evt.preventDefault();\n\n    if (checkData()) {\n      const request = {\n        distance: {\n          unit: unitIn,\n          value: value,\n        },\n        convert_to: unitOut,\n      };\n\n      onClick({ request: request, type: 'getResult' });\n    } else {\n      toast.error('Пожалуйста, проверьте введенные данные', {\n        autoClose: 2000,\n      });\n    }\n  };\n\n  const checkData = () => {\n    if (\n      !Number.isNaN(value) &&\n      value !== 0 &&\n      value !== '' &&\n      unitIn !== '' &&\n      unitOut !== ''\n    ) {\n      return true;\n    }\n    return false;\n  };\n\n  return (\n    <form onSubmit={createRequest}>\n      <ToastContainer />\n      <table className={s.table}>\n        <thead>\n          <tr>\n            <th>Введите значение:</th>\n            <th>Выберите единицу измерения:</th>\n            <th>Выберите единицу для конвертации:</th>\n            <th>Отправить запрос:</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>\n              <label>\n                <input\n                  className={s.inputField}\n                  type=\"number\"\n                  name=\"value\"\n                  value={value}\n                  onChange={handleChanges}\n                />\n              </label>\n            </td>\n            <td>\n              <select\n                className={s.inputField}\n                name=\"unitIn\"\n                onChange={handleChanges}\n              >\n                <option value=\"\">--Выберите единицу измерения--</option>\n                {unitsList.map(el => (\n                  <option\n                    value={el.unit}\n                    key={`in-${el.unit}`}\n                  >{`${el.name} (${el.unit})`}</option>\n                ))}\n              </select>\n            </td>\n            <td>\n              <select\n                className={s.inputField}\n                name=\"unitOut\"\n                onChange={handleChanges}\n              >\n                <option value=\"\">--Выберите единицу измерения--</option>\n                {unitsList.map(el => (\n                  <option\n                    value={el.unit}\n                    key={`out-${el.unit}`}\n                  >{`${el.name} (${el.unit})`}</option>\n                ))}\n              </select>\n            </td>\n            <td>\n              <button className={s.button} type=\"submit\">\n                Рассчитать\n              </button>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </form>\n  );\n};\n\nConvertForm.propTypes = {\n  unitsList: PropTypes.array.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default ConvertForm;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport s from './AddForm.module.css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst AddForm = ({ unitsList, onSubmit }) => {\n  const [unit, setUnit] = useState('');\n  const [name, setName] = useState('');\n  const [ratio, setRatio] = useState('');\n  const [oldUnit, setOldUnit] = useState('');\n\n  const handleChanges = evt => {\n    const { name, value } = evt.target;\n    switch (name) {\n      case 'unit':\n        setUnit(value);\n        break;\n      case 'name':\n        setName(value);\n        break;\n      case 'ratio':\n        setRatio(value);\n        break;\n      case 'oldUnit':\n        setOldUnit(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const createRequest = evt => {\n    evt.preventDefault();\n\n    if (checkData()) {\n      if (!checkList(unit)) {\n        const request = {\n          [unit]: {\n            name,\n            ratios: {\n              [oldUnit]: ratio,\n            },\n          },\n        };\n\n        onSubmit({ request: request, type: 'updateList' });\n      } else {\n        toast.error('Эта единица измерения уже есть в перечне', {\n          autoClose: 2000,\n        });\n      }\n    } else {\n      toast.error('Пожалуйста, проверьте введенные данные', {\n        autoClose: 2000,\n      });\n    }\n  };\n\n  const checkData = () => {\n    if (\n      unit !== '' &&\n      name !== '' &&\n      oldUnit !== '' &&\n      !Number.isNaN(ratio) &&\n      ratio !== 0 &&\n      ratio !== ''\n    ) {\n      return true;\n    }\n    return false;\n  };\n\n  const checkList = target => {\n    return unitsList.map(el => el.unit).includes(target);\n  };\n\n  return (\n    <form className={s.form} onSubmit={createRequest}>\n      <ToastContainer />\n      <table className={s.table}>\n        <thead>\n          <tr>\n            <th>\n              Введите новую единицу измерения{' '}\n              <p className={s.note}>(mm,yd,...)</p>\n            </th>\n            <th>Введите наименование новой единицы измерения </th>\n            <th>Выберите единицу для формирования соотношения</th>\n            <th>\n              Введите значение соотношения{' '}\n              <p className={s.note}>\n                (1 новая единица = ... выбранной единицы)\n              </p>\n            </th>\n            <th>Добавить новую единицу</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>\n              <label>\n                <input\n                  className={s.inputField}\n                  type=\"text\"\n                  name=\"unit\"\n                  value={unit}\n                  onChange={handleChanges}\n                />\n              </label>\n            </td>\n            <td>\n              <label>\n                <input\n                  className={s.inputField}\n                  type=\"text\"\n                  name=\"name\"\n                  value={name}\n                  onChange={handleChanges}\n                />\n              </label>\n            </td>\n            <td>\n              <select\n                className={s.inputField}\n                name=\"oldUnit\"\n                onChange={handleChanges}\n              >\n                <option value=\"\">--Выберите единицу измерения--</option>\n                {unitsList.map(el => (\n                  <option\n                    value={el.unit}\n                    key={`old-${el.unit}`}\n                  >{`${el.name} (${el.unit})`}</option>\n                ))}\n              </select>\n            </td>\n            <td>\n              <label>\n                <input\n                  className={s.inputField}\n                  type=\"number\"\n                  name=\"ratio\"\n                  value={ratio}\n                  onChange={handleChanges}\n                />\n              </label>\n            </td>\n            <td>\n              <button className={s.button} type=\"submit\">\n                Добавить\n              </button>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </form>\n  );\n};\n\nAddForm.propTypes = {\n  unitsList: PropTypes.array.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default AddForm;\n","import { useState } from 'react';\nimport * as server from '../BackEnd/backend';\nimport ConvertForm from './ConvertForm';\nimport AddForm from './AddForm';\nimport s from './FrontEnd.module.css';\nimport { MdAdd } from 'react-icons/md';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n// request - { “distance”: { “unit”: “m”, “value”: 0.5 }, “convert_to”: “ft” }\n// result - { “unit”: “ft”, “value”: 1.64 }\n\nconst FrontEnd = () => {\n  const [unitsList, setUnitsList] = useState(() =>\n    JSON.parse(server.getUnitsList()),\n  );\n  const [request, setRequest] = useState({ getResult: '', updateList: '' });\n  const [response, setResponse] = useState({ result: '', newList: '' });\n  const [showForm, setShowForm] = useState(false);\n  const [message, setMessage] = useState('');\n\n  const sendRequestGetResponse = ({ request, type }) => {\n    if (type === 'getResult') {\n      const result = JSON.parse(server.getResult(JSON.stringify(request)));\n\n      setRequest(prevState => ({ ...prevState, getResult: request }));\n      setResponse(prevState => ({ ...prevState, result: result }));\n\n      setMessage(\n        `${request.distance.value} ${request.distance.unit} = ${result.value} ${result.unit}`,\n      );\n    }\n    if (type === 'updateList') {\n      const newList = JSON.parse(server.updateList(JSON.stringify(request)));\n\n      setRequest(prevState => ({ ...prevState, updateList: request }));\n      setResponse(prevState => ({ ...prevState, newList: newList }));\n      setUnitsList(newList);\n      toast.success(\n        'Ваша новая единица измерения была успешно добавлена в реестр',\n        { autoClose: 2000 },\n      );\n      toggleAddForm();\n    }\n  };\n\n  const toggleAddForm = () => {\n    setShowForm(prevState => !prevState);\n  };\n\n  return (\n    <div className={s.container}>\n      <ToastContainer />\n      <div className={s.container}>\n        <h2 className={s.blueTitle}>Реализация: </h2>\n        {unitsList.length > 0 && (\n          <ConvertForm unitsList={unitsList} onClick={sendRequestGetResponse} />\n        )}\n        <h3 className={s.blueTitle}>Результат: </h3>\n        <p>{message}</p>\n      </div>\n\n      <div className={s.container}>\n        <button\n          className={s.addContainer}\n          type=\"button\"\n          onClick={toggleAddForm}\n        >\n          <span className={s.addButton}>\n            <MdAdd className={s.addIcon} />\n          </span>\n          Добавить новую единицу измерения\n        </button>\n        {showForm && (\n          <AddForm unitsList={unitsList} onSubmit={sendRequestGetResponse} />\n        )}\n      </div>\n\n      <div className={s.container}>\n        <h3 className={s.blueTitle}>Взаимодействие с \"сервером\"</h3>\n        <p>\n          Запрос на сервер: <span>{JSON.stringify(request)}</span>{' '}\n        </p>\n        <p>\n          Ответ сервера: <span>{JSON.stringify(response)}</span>{' '}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default FrontEnd;\n","import React from 'react';\nimport FrontEnd from './FrontEnd';\nimport s from './Task1.module.css';\n\nconst Task1 = () => {\n  return (\n    <div className={s.TaskField}>\n      <h1 className={s.bigTitle}>Конвертер расстояний</h1>\n      <div className={s.container}>\n        <h2 className={s.smallTitle}>Задача:</h2>\n        <p>\n          Разработать приложение для конвертации между единицами измерения\n          расстояния с поддержкой метрической и имперской систем мер. Приложение\n          должно поддерживать конвертацию между любыми единицами. Также\n          необходимо реализовать возможность расширять список поддерживаемых\n          единиц.\n        </p>\n      </div>\n      <FrontEnd />\n    </div>\n  );\n};\n\nexport default Task1;\n\n// Задача:\n// Разработать приложение для конвертации между единицами измерения расстояния с\n// поддержкой метрической и имперской систем мер.Соотношения для конвертации вы\n// можете взять из таблицы.По умолчанию, приложение должно распознавать метры(m),\n// \tсантиметры(cm), дюймы( in ) и футы(ft), и поддерживать конвертацию между любыми\n// единицами.\n// Также необходимо реализовать возможность расширять список поддерживаемых единиц\n// путем задания правил конвертации посредством JSON файла.Формат JSON файла - на\n// ваше усмотрение.В качестве примера, расширьте ваше приложение добавив в файл\n// значения для миллиметров(mm), ярдов(yd) и километров(km).\n// Входящие параметры:\n// Объект в JSON формате, содержащий расстояние заданное для конвертации(distance) со\n// значением(value) и шкалой(unit), a также обозначение единицы для шкалы, в которую\n// должна быть произведена конвертация(convert_to).Например:\n// { “distance”: { “unit”: “m”, “value”: 0.5 }, “convert_to”: “ft” }\n// Выходные данные:\n// Объект в JSON формате, содержащий полученное значение расстояния, округленное до\n// сотых, а также обозначение соответствующей единицы измерения, например:\n// { “unit”: “ft”, “value”: 1.64 }\n","import React from 'react';\nimport s from './Task2.module.css';\n\nconst Task2 = () => {\n  return <div className={s.TaskField}>This is Task2</div>;\n};\n\nexport default Task2;\n\n// Задача:\n// Разработать простое приложение для сортировки и отбора данных по заранее заданным\n// правилам.Приложение должно уметь работать со списками JSON объектов произвольной\n// структуры, отбирать объекты, содержащие ключи с определенными значениями, а также\n// сортировать объекты по значениям, используя естественный порядок сортировки.\n// \tsysgears.com\n// hr@sysgears.com\n// Например, если для данных вида:\n// { “data”: [{ “name”: “John”, “email”: “john2@mail.com” },\n// { “name”: “John”, “email”: “john1@mail.com” },\n// { “name”: “Jane”, “email”: “jane@mail.com” }]}\n// задать условие:\n// { “condition”: { “include”: [{ “name”: “John” }], “sort_by”: [“email”] } }\n// содержащее два правила - include и sort_by(где правило include принимает набор пар\n// ключ: значение для проверки записей на соответствие, а правило sort_by принимает набор\n// ключей для сортировки), результатом будет объект, содержащий только записи с именем\n// John, отсортированные по ключу email:\n// { “result”: [{ “name”: “John”, “email”: “john1@mail.com” },\n// { “name”: “John”, “email”: “john2@mail.com” }]}\n// Планируя подход к дизайну кода приложения, необходимо предусмотреть возможность\n// расширять функционал через добавление в код новых “модулей” с правилами.Важно,\n// \tчтобы все модули имели между собой идентичную структуру, были изолированы друг от\n// друга и остального кода приложения, и взаимодействовали с основным кодом, используя\n// один и тот же подход.В качестве примера, вы можете добавить модуль с дополнительным\n// правилом exclude, которое будет отбрасывать записи, содержащие ключи с определенным\n// значением.\n// Входящие параметры:\n// JSON объект со списком данных(data), и условием для обработки(condition):\n// { “data”: [{ “user”: “mike@mail.com”, “rating”: 20, “disabled”: false },\n// { “user”: “greg@mail.com”, “rating”: 14, “disabled”: false },\n// { “user”: “john@mail.com”, “rating”: 25, “disabled”: true }],\n// “condition”: { “exclude”: [{ “disabled”: true}], “sort_by”: [“rating”] }}\n// Выходные данные:\n// JSON объект с данными полученными после применения условия обработки(result):\n// { “result”: [{ “user”: “greg@mail.com”, “rating”: 14, “disabled”: false },\n// { “user”: “mike@mail.com”, “rating”: 20, “disabled”: false }]}\n","import React from 'react';\nimport s from './Task3.module.css';\n\nconst Task3 = () => {\n  return <div className={s.TaskField}>This is Task3</div>;\n};\n\nexport default Task3;\n\n// Задача:\n// Разработать приложение, позволяющее разбивать заданный набор натуральных чисел на\n// два поднабора таким образом, чтобы суммы результирующих наборов были одинаковыми,\n// \tлибо, если такое разбиение невозможно, максимально приближены друг к другу.Во\n// втором случае допускается определенная погрешность решения(т.е.выбранный алгоритм\n// может давать не самый оптимальный результат в некоторых случаях).\n// Вы можете реализовать свой собственный алгоритм решения, или найти и использовать\n// существующие математические алгоритмы, разработанные для подобного типа задач.\n// Входящие параметры:\n// JSON объект, содержащий произвольное множество натуральных чисел(set).Например:\n// { “set”: [4, 5, 6, 7, 8] } , или { “set”: [3, 3, 3, 7, 5] }\n// Выходные данные:\n// Объект в JSON формате, содержащий два результирующий набора(set_1 и set_2):\n// { “set_1”: [7, 8], “set_2”: [4, 5, 6] } , или { “set_1”: [3, 3, 5], “set_2”: [3, 7] }\n","import React from 'react';\nimport s from './Task4.module.css';\n\nconst Task4 = () => {\n  return <div className={s.TaskField}>This is Task4</div>;\n};\n\nexport default Task4;\n\n// Задача:\n// Необходимо разработать алгоритм, позволяющий определить порядок задействования\n// топливных капсул ионных двигателей спутника для совершения заранее заданного ряда\n// маневров.Капсулы имеют 5 разновидностей, и разработаны для получения прироста\n// скорости в 2, 4, 6, 8 или 10 м / с.Каждый маневр требует получить прирост скорости от 1\n// до 12 м / с.Для совершения одного маневра спутник может одновременно использовать\n// два двигателя:\n// ● первый - позволяет получить прирост скорости равный значению используемой\n// капсулы.Например, для капсулы 4 м / с, прирост будет ровно 4 м / с.\n// ● второй - позволяет получить прирост скорости равный половине значения\n// капсулы.Например, для капсулы 4 м / с, прирост будет ровно 2 м / с.\n// Для совершения одного маневра запускать каждый двигатель можно максимум один раз.\n// \tТакже, для одного маневра, допускается суммарный прирост скорости меньше\n// sysgears.com\n// hr@sysgears.com\n// требуемого(например если запаса капсул недостаточно), но превышение заданного\n// приращения скорости запрещено.Капсулы невозможно использовать повторно.\n// Алгоритм должен определять такой порядок использования капсул, при котором сумма\n// приращений скорости по всем маневрам, и при соблюдении всех условий, будет\n// максимальной, задавая таким образом наиболее точную траекторию.Количество\n// маневров, допустимое приращение скорости на каждом из них, а также доступный набор\n// капсул может быть произвольным.\n// Мы рекомендуем решать эту задачу используя генетический алгоритм(возможно, с\n// определенными модификациями).\n// Входящие параметры:\n// JSON объект, содержащий массив произвольной длины с целыми положительными\n// приращениями скорости, которые требуется достичь на каждом из маневров(corrections);\n// и массив произвольной длины содержащий список доступных топливных капсул(cells),\n// \tнапример:\n// { “corrections”: [1, 12, 7, 1], “cells”: [8, 4, 6, 2, 2] }\n// Выходные данные:\n// JSON объект, содержащий последовательность использования капсул для первого\n// двигателя(main_thruster); последовательность использования капсул для второго\n// двигателя(sec_thruster); и итоговое полученное приращение скорости(delta_velocity).\n// \tНапример:\n// { “main_thruster”: [0, 8, 6, 0], “sec_thruster”: [2, 4, 2, 0], “delta_velocity”: 18 }\n","import { useState } from 'react';\nimport Header from './Components/Header';\nimport Task1 from './Components/Task1';\nimport Task2 from './Components/Task2';\nimport Task3 from './Components/Task3';\nimport Task4 from './Components/Task4';\nimport s from './App.module.css';\n\nconst App = () => {\n  const [showTask, setShowTask] = useState([false, false, false, false]);\n\n  const onClick = targetIndex => {\n    setShowTask(prevState =>\n      prevState.map((el, index) => (el = index === targetIndex ? true : false)),\n    );\n  };\n\n  return (\n    <div className={s.App}>\n      <Header onClick={onClick} />\n      {showTask[0] && <Task1 />}\n      {showTask[1] && <Task2 />}\n      {showTask[2] && <Task3 />}\n      {showTask[3] && <Task4 />}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}